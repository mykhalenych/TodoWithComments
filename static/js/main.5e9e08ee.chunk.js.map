{"version":3,"sources":["components/Task.jsx","components/Comment.jsx","components/CreateTaskInput.jsx","components/CreateCommentInput.jsx","redux/tasks.selector.js","gateway/tasksGateway.js","redux/tasks.actions.js","App.js","redux/tasks.reducer.js","store.js","index.js"],"names":["Task","task","onChange","onDelete","onSelect","listItemClasses","classNames","done","listTextClasses","className","onClick","type","defaultChecked","id","text","comments","length","Comment","selectedTask","key","Math","random","map","item","style","backgroundColor","CreateTaskInput","onCreate","useState","value","setValue","e","target","CreateCommentInput","color","setColor","comment","tasksListSelector","state","tasks","tasksList","selectedTaskSelector","baseUrl","getTasksList","dispatch","fetch","then","response","ok","json","payload","taskListRecived","mapDispatch","actions","updateTaskList","getState","find","updatedTask","taskId","method","headers","body","JSON","stringify","Error","updateTask","deleteTaskList","res","createTaskList","newTask","getTask","createComent","taskData","error","console","connect","useEffect","sorteList","slice","sort","a","b","undefined","initialState","reducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5e9e08ee.chunk.js","sourcesContent":["import React from \"react\";\nimport classNames from \"classnames\";\n\nconst Task = ({ task, onChange, onDelete, onSelect }) => {\n  const listItemClasses = classNames(\"list-item\", {\n    \"list-item_done\": task.done,\n  });\n  const listTextClasses = task.done ? \"list-item__text \" : \"\";\n\n  return (\n    <li className={listItemClasses} onClick={() => onSelect(task)}>\n      <input\n        className=\"list-item__checkbox\"\n        type=\"checkbox\"\n        defaultChecked={task.done}\n        onChange={() => onChange(task.id)}\n      />\n      <span className={listTextClasses}>{task.text}</span>\n      <button className=\"list-item__comments\">{task.comments.length}</button>\n      <button\n        className=\"list-item__delete-btn\"\n        onClick={() => onDelete(task.id)}\n      ></button>\n    </li>\n  );\n};\n\nexport default Task;\n","import React from \"react\";\n\nconst Comment = ({ selectedTask }) => {\n  if (!selectedTask.comments) {\n    return (\n      <li className=\"list-item\">\n        <span>No comments</span>\n      </li>\n    );\n  }\n  return (\n    <div className=\"comments\">\n      {selectedTask.comments.length === 0 ? (\n        <li className=\"list-item\" key={Math.random() * 10000}>\n          <span>No comments</span>\n        </li>\n      ) : (\n        selectedTask.comments.map((item) => (\n          <li className=\"list-item\">\n            <span\n              className=\"list-item__color\"\n              style={{ backgroundColor: `${item[1]}` }}\n            ></span>\n            <span>{item[0]}</span>\n          </li>\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default Comment;\n","import React, { useState } from \"react\";\n\nconst CreateTaskInput = ({ onCreate }) => {\n  const [value, setValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n\n  const handleTaskCreate = () => {\n    onCreate(value);\n    setValue(\"\");\n  };\n\n  return (\n      <div className=\"create-task\">\n        <input\n          type=\"text\"\n          className=\"create-task__input\"\n          value={value}\n          onChange={handleChange}\n        />\n        <button className=\"btn create-task__btn\" onClick={handleTaskCreate}>\n          Create\n        </button>\n      </div>\n  );\n};\n\nexport default CreateTaskInput;\n","import React, { useState } from \"react\";\n\nconst CreateCommentInput = ({ selectedTask, onCreate }) => {\n  const [value, setValue] = useState(\"\");\n  const [color, setColor] = useState(\"\");\n\n  const handleChange = (e) => {\n    setValue(e.target.value);\n  };\n  const handleChangeColor = (e) => {\n    setColor(e.target.value);\n  };\n  const handleTaskCreate = () => {\n    const comment = [value, color];\n    onCreate(selectedTask.id, comment);\n    setValue(\"\");\n  };\n\n  return (\n    <div className=\"create-task\">\n      <input\n        className=\"create-task__color\"\n        type=\"color\"\n        onChange={handleChangeColor}\n      />\n      <input\n        type=\"text\"\n        className=\"create-task__input\"\n        value={value}\n        onChange={handleChange}\n      />\n\n      <button className=\"btn create-task__btn\" onClick={handleTaskCreate}>\n        Create\n      </button>\n    </div>\n  );\n};\n\nexport default CreateCommentInput;\n","export const tasksListSelector = (state) => state.tasks.tasksList;\nexport const selectedTaskSelector = (state) => state.tasks.selectedTask;\n","const baseUrl = \"https://5e64c3daa49c210016106bc4.mockapi.io/tasks\";\n\nexport const fetchTasksList = () => {\n  return fetch(baseUrl)\n    .then((response) => {\n      if (response.ok) {\n        return response.json();\n      }\n    })\n    .then((tasksList) => {\n      return tasksList;\n    });\n};\n\nexport const createTask = (newTask) => {\n  return fetch(baseUrl, {\n    method: \"POST\",\n    headers: {\n      \"Content-type\": \"application/json; charset=utf-8\",\n    },\n    body: JSON.stringify(newTask),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to create task\");\n    }\n  });\n};\n\nexport const updateTask = (taskId, updatedTask) => {\n  return fetch(`${baseUrl}/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json; charset=utf-8\",\n    },\n    body: JSON.stringify(updatedTask),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to update task\");\n    }\n  });\n};\nexport const createComment = (taskId, comment) => {\n  return fetch(`${baseUrl}/${taskId}`, {\n    method: \"PUT\",\n    headers: {\n      \"Content-type\": \"application/json; charset=utf-8\",\n    },\n    body: JSON.stringify(comment),\n  }).then((response) => {\n    if (!response.ok) {\n      throw new Error(\"Failed to create comment\");\n    }\n  });\n};\n\nexport const deleteTask = (taskId) => {\n  return fetch(`${baseUrl}/${taskId}`, {\n    method: \"DELETE\",\n  }).then((res) => {\n    if (!res.ok) {\n      throw new Error(\"Failed to delete tasks\");\n    }\n  });\n};\n","import {\n  fetchTasksList,\n  updateTask,\n  deleteTask,\n  createTask,\n  createComment,\n} from \"../gateway/tasksGateway\";\nimport { tasksListSelector } from \"./tasks.selector\";\n\nexport const TASK_LIST_RECIVED = \"TASK_LIST_RECIVED\";\nexport const GET_TASK = \"GET_TASK\";\n\nexport const taskListRecived = (tasksList) => {\n  const action = {\n    type: TASK_LIST_RECIVED,\n    payload: {\n      tasksList,\n    },\n  };\n  return action;\n};\nexport const selecedTaskRecived = (selectTask) => {\n  const action = {\n    type: GET_TASK,\n    payload: {\n      selectTask,\n    },\n  };\n  return action;\n};\n\nexport const getTasksList = () => {\n  const thunkAction = function (dispatch) {\n    fetchTasksList().then((tasksList) => dispatch(taskListRecived(tasksList)));\n  };\n  return thunkAction;\n};\n\nexport const updateTaskList = (id) => {\n  const thunkAction = function (dispatch, getState) {\n    const state = getState();\n    const tasksList = tasksListSelector(state);\n    const task = tasksList.find((task) => task.id === id);\n    const updatedTask = {\n      ...task,\n      done: !task.done,\n    };\n\n    updateTask(id, updatedTask).then(() => dispatch(getTasksList()));\n  };\n  return thunkAction;\n};\n\nexport const deleteTaskList = (id) => {\n  const thunkAction = function (dispatch) {\n    deleteTask(id).then(() => dispatch(getTasksList()));\n  };\n  return thunkAction;\n};\n\nexport const createTaskList = (text) => {\n  const thunkAction = function (dispatch) {\n    const taskData = {\n      text,\n      done: false,\n    };\n    createTask(taskData).then(() => dispatch(getTasksList()));\n  };\n  return thunkAction;\n};\nexport const selectTask = (task) => {\n  return { type: GET_TASK, payload: task };\n};\n\nexport const createCommentList = (id, text) => {\n  const thunkAction = function (dispatch, getState) {\n    const state = getState();\n    const tasksList = tasksListSelector(state);\n    const task = tasksList.find((task) => task.id === id);\n    try {\n      const taskData = {\n        ...task,\n        comments: [...task.comments, text],\n        done: false,\n      };\n      createComment(id, taskData).then(() => dispatch(getTasksList()));\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return thunkAction;\n};\n","import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport Task from \"./components/Task.jsx\";\nimport Comment from \"./components/Comment.jsx\";\nimport CreateTaskInput from \"./components/CreateTaskInput.jsx\";\nimport CreateCommentInput from \"./components/CreateCommentInput.jsx\";\nimport {\n  tasksListSelector,\n  selectedTaskSelector,\n} from \"./redux/tasks.selector\";\nimport * as actions from \"./redux/tasks.actions\";\n\nconst App = ({\n  getTasksList,\n  tasks,\n  updateTaskList,\n  createTaskList,\n  deleteTaskList,\n  getTask,\n  selectedTask,\n  createComent,\n}) => {\n  useEffect(() => {\n    getTasksList();\n  }, [selectedTask]);\n\n  const sorteList = tasks.slice().sort((a, b) => a.done - b.done);\n  return (\n    <div className=\"form\">\n      <div className=\"todo-list\">\n        <h2 className=\"title\">Items</h2>\n        <CreateTaskInput onCreate={createTaskList} />\n        <ul className=\"list\">\n          {sorteList.map((task) => (\n            <Task\n              task={task}\n              key={task.id}\n              onChange={updateTaskList}\n              onDelete={deleteTaskList}\n              onSelect={getTask}\n            />\n          ))}\n        </ul>\n      </div>\n      <div className=\"comment-list\">\n        <h2 className=\"title\">\n          {selectedTask.id === undefined\n            ? \"Comments\"\n            : `Comments #${selectedTask.id}`}\n        </h2>\n        <CreateCommentInput\n          selectedTask={selectedTask}\n          onCreate={createComent}\n        />\n        <Comment selectedTask={selectedTask} />\n      </div>\n    </div>\n  );\n};\n\nApp.propTypes = {\n  getTasksList: PropTypes.func.isRequired,\n  tasks: PropTypes.array,\n  createTaskList: PropTypes.func,\n  deleteTaskList: PropTypes.func,\n  updateTaskList: PropTypes.func,\n  createComent: PropTypes.func,\n};\n\nconst mapDispatch = {\n  getTasksList: actions.getTasksList,\n  updateTaskList: actions.updateTaskList,\n  deleteTaskList: actions.deleteTaskList,\n  createTaskList: actions.createTaskList,\n  getTask: actions.selectTask,\n  createComent: actions.createCommentList,\n};\n\nconst mapState = (state) => {\n  return {\n    tasks: tasksListSelector(state),\n    selectedTask: selectedTaskSelector(state),\n  };\n};\nexport default connect(mapState, mapDispatch)(App);\n","import { TASK_LIST_RECIVED, GET_TASK } from \"./tasks.actions\";\n\nconst initialState = {\n  tasksList: [],\n  selectedTask: [],\n};\n\nexport const tasksReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case TASK_LIST_RECIVED:\n      return {\n        ...state,\n        tasksList: action.payload.tasksList,\n      };\n    case GET_TASK:\n      return {\n        ...state,\n        selectedTask: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\n\n","import { createStore, combineReducers, applyMiddleware, compose } from \"redux\";\nimport thunk from \"redux-thunk\";\nimport { tasksReducer } from \"./redux/tasks.reducer\";\nconst reducer = combineReducers({\n  tasks: tasksReducer,\n});\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(reducer, composeEnhancers(applyMiddleware(thunk)));\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport store from \"./store\";\nimport { Provider } from \"react-redux\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}